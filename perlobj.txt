PERLOBJ(1)            User Contributed Perl Documentation           PERLOBJ(1)



NNAAMMEE
       perlobj - Perl objects

DDEESSCCRRIIPPTTIIOONN
       First you need to understand what references are in Perl.  See perlref
       for that.  Second, if you still find the following reference work too
       complicated, a tutorial on object-oriented programming in Perl can be
       found in perltoot and perltooc.

       If you’re still with us, then here are three very simple definitions
       that you should find reassuring.

       1.  An object is simply a reference that happens to know which class it
           belongs to.

       2.  A class is simply a package that happens to provide methods to deal
           with object references.

       3.  A method is simply a subroutine that expects an object reference
           (or a package name, for class methods) as the first argument.

       We’ll cover these points now in more depth.

       AAnn OObbjjeecctt iiss SSiimmppllyy aa RReeffeerreennccee

       Unlike say C++, Perl doesn’t provide any special syntax for construc-
       tors.  A constructor is merely a subroutine that returns a reference to
       something "blessed" into a class, generally the class that the subrou-
       tine is defined in.  Here is a typical constructor:

           package Critter;
           sub new { bless {} }

       That word "new" isn’t special.  You could have written a construct this
       way, too:

           package Critter;
           sub spawn { bless {} }

       This might even be preferable, because the C++ programmers won’t be
       tricked into thinking that "new" works in Perl as it does in C++.  It
       doesn’t.  We recommend that you name your constructors whatever makes
       sense in the context of the problem you’re solving.  For example, con-
       structors in the Tk extension to Perl are named after the widgets they
       create.

       One thing that’s different about Perl constructors compared with those
       in C++ is that in Perl, they have to allocate their own memory.  (The
       other things is that they don’t automatically call overridden base-
       class constructors.)  The "{}" allocates an anonymous hash containing
       no key/value pairs, and returns it  The _b_l_e_s_s_(_) takes that reference
       and tells the object it references that it’s now a Critter, and returns
       the reference.  This is for convenience, because the referenced object
       itself knows that it has been blessed, and the reference to it could
       have been returned directly, like this:

           sub new {
               my $self = {};
               bless $self;
               return $self;
           }

       You often see such a thing in more complicated constructors that wish
       to call methods in the class as part of the construction:

           sub new {
               my $self = {};
               bless $self;
               $self->initialize();
               return $self;
           }

       If you care about inheritance (and you should; see "Modules: Creation,
       Use, and Abuse" in perlmodlib), then you want to use the two-arg form
       of bless so that your constructors may be inherited:

           sub new {
               my $class = shift;
               my $self = {};
               bless $self, $class;
               $self->initialize();
               return $self;
           }

       Or if you expect people to call not just "CLASS->new()" but also
       "$obj->new()", then use something like the following.  (Note that using
       this to call _n_e_w_(_) on an instance does not automatically perform any
       copying.  If you want a shallow or deep copy of an object, you’ll have
       to specifically allow for that.)  The _i_n_i_t_i_a_l_i_z_e_(_) method used will be
       of whatever $class we blessed the object into:

           sub new {
               my $this = shift;
               my $class = ref($this) ││ $this;
               my $self = {};
               bless $self, $class;
               $self->initialize();
               return $self;
           }

       Within the class package, the methods will typically deal with the ref-
       erence as an ordinary reference.  Outside the class package, the refer-
       ence is generally treated as an opaque value that may be accessed only
       through the class’s methods.

       Although a constructor can in theory re-bless a referenced object cur-
       rently belonging to another class, this is almost certainly going to
       get you into trouble.  The new class is responsible for all cleanup
       later.  The previous blessing is forgotten, as an object may belong to
       only one class at a time.  (Although of course it’s free to inherit
       methods from many classes.)  If you find yourself having to do this,
       the parent class is probably misbehaving, though.

       A clarification:  Perl objects are blessed.  References are not.
       Objects know which package they belong to.  References do not.  The
       _b_l_e_s_s_(_) function uses the reference to find the object.  Consider the
       following example:

           $a = {};
           $b = $a;
           bless $a, BLAH;
           print "\$b is a ", ref($b), "\n";

       This reports $b as being a BLAH, so obviously _b_l_e_s_s_(_) operated on the
       object and not on the reference.

       AA CCllaassss iiss SSiimmppllyy aa PPaacckkaaggee

       Unlike say C++, Perl doesn’t provide any special syntax for class defi-
       nitions.  You use a package as a class by putting method definitions
       into the class.

       There is a special array within each package called @ISA, which says
       where else to look for a method if you can’t find it in the current
       package.  This is how Perl implements inheritance.  Each element of the
       @ISA array is just the name of another package that happens to be a
       class package.  The classes are searched (depth first) for missing
       methods in the order that they occur in @ISA.  The classes accessible
       through @ISA are known as base classes of the current class.

       All classes implicitly inherit from class "UNIVERSAL" as their last
       base class.  Several commonly used methods are automatically supplied
       in the UNIVERSAL class; see "Default UNIVERSAL methods" for more
       details.

       If a missing method is found in a base class, it is cached in the cur-
       rent class for efficiency.  Changing @ISA or defining new subroutines
       invalidates the cache and causes Perl to do the lookup again.

       If neither the current class, its named base classes, nor the UNIVERSAL
       class contains the requested method, these three places are searched
       all over again, this time looking for a method named _A_U_T_O_L_O_A_D_(_).  If an
       AUTOLOAD is found, this method is called on behalf of the missing
       method, setting the package global $AUTOLOAD to be the fully qualified
       name of the method that was intended to be called.

       If none of that works, Perl finally gives up and complains.

       If you want to stop the AUTOLOAD inheritance say simply

               sub AUTOLOAD;

       and the call will die using the name of the sub being called.

       Perl classes do method inheritance only.  Data inheritance is left up
       to the class itself.  By and large, this is not a problem in Perl,
       because most classes model the attributes of their object using an
       anonymous hash, which serves as its own little namespace to be carved
       up by the various classes that might want to do something with the
       object.  The only problem with this is that you can’t sure that you
       aren’t using a piece of the hash that isn’t already used.  A reasonable
       workaround is to prepend your fieldname in the hash with the package
       name.

           sub bump {
               my $self = shift;
               $self->{ __PACKAGE__ . ".count"}++;
           }

       AA MMeetthhoodd iiss SSiimmppllyy aa SSuubbrroouuttiinnee

       Unlike say C++, Perl doesn’t provide any special syntax for method def-
       inition.  (It does provide a little syntax for method invocation
       though.  More on that later.)  A method expects its first argument to
       be the object (reference) or package (string) it is being invoked on.
       There are two ways of calling methods, which we’ll call class methods
       and instance methods.

       A class method expects a class name as the first argument.  It provides
       functionality for the class as a whole, not for any individual object
       belonging to the class.  Constructors are often class methods, but see
       perltoot and perltooc for alternatives.  Many class methods simply
       ignore their first argument, because they already know what package
       they’re in and don’t care what package they were invoked via.  (These
       aren’t necessarily the same, because class methods follow the inheri-
       tance tree just like ordinary instance methods.)  Another typical use
       for class methods is to look up an object by name:

           sub find {
               my ($class, $name) = @_;
               $objtable{$name};
           }

       An instance method expects an object reference as its first argument.
       Typically it shifts the first argument into a "self" or "this" vari-
       able, and then uses that as an ordinary reference.

           sub display {
               my $self = shift;
               my @keys = @_ ? @_ : sort keys %$self;
               foreach $key (@keys) {
                   print "\t$key => $self->{$key}\n";
               }
           }

       MMeetthhoodd IInnvvooccaattiioonn

       For various historical and other reasons, Perl offers two equivalent
       ways to write a method call.  The simpler and more common way is to use
       the arrow notation:

           my $fred = Critter->find("Fred");
           $fred->display("Height", "Weight");

       You should already be familiar with the use of the "->" operator with
       references.  In fact, since $fred above is a reference to an object,
       you could think of the method call as just another form of dereferenc-
       ing.

       Whatever is on the left side of the arrow, whether a reference or a
       class name, is passed to the method subroutine as its first argument.
       So the above code is mostly equivalent to:

           my $fred = Critter::find("Critter", "Fred");
           Critter::display($fred, "Height", "Weight");

       How does Perl know which package the subroutine is in?  By looking at
       the left side of the arrow, which must be either a package name or a
       reference to an object, i.e. something that has been blessed to a pack-
       age.  Either way, that’s the package where Perl starts looking.  If
       that package has no subroutine with that name, Perl starts looking for
       it in any base classes of that package, and so on.

       If you need to, you _c_a_n force Perl to start looking in some other pack-
       age:

           my $barney = MyCritter->Critter::find("Barney");
           $barney->Critter::display("Height", "Weight");

       Here "MyCritter" is presumably a subclass of "Critter" that defines its
       own versions of _f_i_n_d_(_) and _d_i_s_p_l_a_y_(_).  We haven’t specified what those
       methods do, but that doesn’t matter above since we’ve forced Perl to
       start looking for the subroutines in "Critter".

       As a special case of the above, you may use the "SUPER" pseudo-class to
       tell Perl to start looking for the method in the packages named in the
       current class’s @ISA list.

           package MyCritter;
           use base ’Critter’;    # sets @MyCritter::ISA = (’Critter’);

           sub display {
               my ($self, @args) = @_;
               $self->SUPER::display("Name", @args);
           }

       It is important to note that "SUPER" refers to the superclass(es) of
       the _c_u_r_r_e_n_t _p_a_c_k_a_g_e and not to the superclass(es) of the object. Also,
       the "SUPER" pseudo-class can only currently be used as a modifier to a
       method name, but not in any of the other ways that class names are nor-
       mally used, eg:

           something->SUPER::method(...);      # OK
           SUPER::method(...);                 # WRONG
           SUPER->method(...);                 # WRONG

       Instead of a class name or an object reference, you can also use any
       expression that returns either of those on the left side of the arrow.
       So the following statement is valid:

           Critter->find("Fred")->display("Height", "Weight");

       and so is the following:

           my $fred = (reverse "rettirC")->find(reverse "derF");

       The right side of the arrow typically is the method name, but a simple
       scalar variable containing either the method name or a subroutine ref-
       erence can also be used.

       IInnddiirreecctt OObbjjeecctt SSyynnttaaxx

       The other way to invoke a method is by using the so-called "indirect
       object" notation.  This syntax was available in Perl 4 long before
       objects were introduced, and is still used with filehandles like this:

          print STDERR "help!!!\n";

       The same syntax can be used to call either object or class methods.

          my $fred = find Critter "Fred";
          display $fred "Height", "Weight";

       Notice that there is no comma between the object or class name and the
       parameters.  This is how Perl can tell you want an indirect method call
       instead of an ordinary subroutine call.

       But what if there are no arguments?  In that case, Perl must guess what
       you want.  Even worse, it must make that guess _a_t _c_o_m_p_i_l_e _t_i_m_e.  Usu-
       ally Perl gets it right, but when it doesn’t you get a function call
       compiled as a method, or vice versa.  This can introduce subtle bugs
       that are hard to detect.

       For example, a call to a method "new" in indirect notation -- as C++
       programmers are wont to make -- can be miscompiled into a subroutine
       call if there’s already a "new" function in scope.  You’d end up call-
       ing the current package’s "new" as a subroutine, rather than the
       desired class’s method.  The compiler tries to cheat by remembering
       bareword "require"s, but the grief when it messes up just isn’t worth
       the years of debugging it will take you to track down such subtle bugs.

       There is another problem with this syntax: the indirect object is lim-
       ited to a name, a scalar variable, or a block, because it would have to
       do too much lookahead otherwise, just like any other postfix derefer-
       ence in the language.  (These are the same quirky rules as are used for
       the filehandle slot in functions like "print" and "printf".)  This can
       lead to horribly confusing precedence problems, as in these next two
       lines:

           move $obj->{FIELD};                 # probably wrong!
           move $ary[$i];                      # probably wrong!

       Those actually parse as the very surprising:

           $obj->move->{FIELD};                # Well, lookee here
           $ary->move([$i]);                   # Didn’t expect this one, eh?

       Rather than what you might have expected:

           $obj->{FIELD}->move();              # You should be so lucky.
           $ary[$i]->move;                     # Yeah, sure.

       To get the correct behavior with indirect object syntax, you would have
       to use a block around the indirect object:

           move {$obj->{FIELD}};
           move {$ary[$i]};

       Even then, you still have the same potential problem if there happens
       to be a function named "move" in the current package.  TThhee ""-->>"" nnoottaa--
       ttiioonn ssuuffffeerrss ffrroomm nneeiitthheerr ooff tthheessee ddiissttuurrbbiinngg aammbbiigguuiittiieess,, ssoo wwee rreeccoomm--
       mmeenndd yyoouu uussee iitt eexxcclluussiivveellyy..  However, you may still end up having to
       read code using the indirect object notation, so it’s important to be
       familiar with it.

       DDeeffaauulltt UUNNIIVVEERRSSAALL mmeetthhooddss

       The "UNIVERSAL" package automatically contains the following methods
       that are inherited by all other classes:

       isa(CLASS)
           "isa" returns _t_r_u_e if its object is blessed into a subclass of
           "CLASS"

           You can also call "UNIVERSAL::isa" as a subroutine with two argu-
           ments.  Of course, this will do the wrong thing if someone has
           overridden "isa" in a class, so don’t do it.

           If you need to determine whether you’ve received a valid invocant,
           use the "blessed" function from Scalar::Util:

               if (blessed($ref) && $ref->isa( ’Some::Class’)) {
                   # ...
               }

           "blessed" returns the name of the package the argument has been
           blessed into, or "undef".

       can(METHOD)
           "can" checks to see if its object has a method called "METHOD", if
           it does then a reference to the sub is returned, if it does not
           then _u_n_d_e_f is returned.

           "UNIVERSAL::can" can also be called as a subroutine with two argu-
           ments.  It’ll always return _u_n_d_e_f if its first argument isn’t an
           object or a class name.  The same caveats for calling "UNIVER-
           SAL::isa" directly apply here, too.

       VERSION( [NEED] )
           "VERSION" returns the version number of the class (package).  If
           the NEED argument is given then it will check that the current ver-
           sion (as defined by the $VERSION variable in the given package) not
           less than NEED; it will die if this is not the case.  This method
           is normally called as a class method.  This method is called auto-
           matically by the "VERSION" form of "use".

               use A 1.2 qw(some imported subs);
               # implies:
               A->VERSION(1.2);

       NNOOTTEE:: "can" directly uses Perl’s internal code for method lookup, and
       "isa" uses a very similar method and cache-ing strategy. This may cause
       strange effects if the Perl code dynamically changes @ISA in any pack-
       age.

       You may add other methods to the UNIVERSAL class via Perl or XS code.
       You do not need to "use UNIVERSAL" to make these methods available to
       your program (and you should not do so).

       DDeessttrruuccttoorrss

       When the last reference to an object goes away, the object is automati-
       cally destroyed.  (This may even be after you exit, if you’ve stored
       references in global variables.)  If you want to capture control just
       before the object is freed, you may define a DESTROY method in your
       class.  It will automatically be called at the appropriate moment, and
       you can do any extra cleanup you need to do.  Perl passes a reference
       to the object under destruction as the first (and only) argument.
       Beware that the reference is a read-only value, and cannot be modified
       by manipulating $_[0] within the destructor.  The object itself (i.e.
       the thingy the reference points to, namely "${$_[0]}", "@{$_[0]}",
       "%{$_[0]}" etc.) is not similarly constrained.

       Since DESTROY methods can be called at unpredictable times, it is
       important that you localise any global variables that the method may
       update.  In particular, localise $@ if you use "eval {}" and localise
       $? if you use "system" or backticks.

       If you arrange to re-bless the reference before the destructor returns,
       perl will again call the DESTROY method for the re-blessed object after
       the current one returns.  This can be used for clean delegation of
       object destruction, or for ensuring that destructors in the base
       classes of your choosing get called.  Explicitly calling DESTROY is
       also possible, but is usually never needed.

       Do not confuse the previous discussion with how objects _C_O_N_T_A_I_N_E_D in
       the current one are destroyed.  Such objects will be freed and
       destroyed automatically when the current object is freed, provided no
       other references to them exist elsewhere.

       SSuummmmaarryy

       That’s about all there is to it.  Now you need just to go off and buy a
       book about object-oriented design methodology, and bang your forehead
       with it for the next six months or so.

       TTwwoo--PPhhaasseedd GGaarrbbaaggee CCoolllleeccttiioonn

       For most purposes, Perl uses a fast and simple, reference-based garbage
       collection system.  That means there’s an extra dereference going on at
       some level, so if you haven’t built your Perl executable using your C
       compiler’s "-O" flag, performance will suffer.  If you _h_a_v_e built Perl
       with "cc -O", then this probably won’t matter.

       A more serious concern is that unreachable memory with a non-zero ref-
       erence count will not normally get freed.  Therefore, this is a bad
       idea:

           {
               my $a;
               $a = \$a;
           }

       Even thought $a _s_h_o_u_l_d go away, it can’t.  When building recursive data
       structures, you’ll have to break the self-reference yourself explicitly
       if you don’t care to leak.  For example, here’s a self-referential node
       such as one might use in a sophisticated tree structure:

           sub new_node {
               my $class = shift;
               my $node  = {};
               $node->{LEFT} = $node->{RIGHT} = $node;
               $node->{DATA} = [ @_ ];
               return bless $node => $class;
           }

       If you create nodes like that, they (currently) won’t go away unless
       you break their self reference yourself.  (In other words, this is not
       to be construed as a feature, and you shouldn’t depend on it.)

       Almost.

       When an interpreter thread finally shuts down (usually when your pro-
       gram exits), then a rather costly but complete mark-and-sweep style of
       garbage collection is performed, and everything allocated by that
       thread gets destroyed.  This is essential to support Perl as an embed-
       ded or a multithreadable language.  For example, this program demon-
       strates Perl’s two-phased garbage collection:

           #!/usr/bin/perl
           package Subtle;

           sub new {
               my $test;
               $test = \$test;
               warn "CREATING " . \$test;
               return bless \$test;
           }

           sub DESTROY {
               my $self = shift;
               warn "DESTROYING $self";
           }

           package main;

           warn "starting program";
           {
               my $a = Subtle->new;
               my $b = Subtle->new;
               $$a = 0;  # break selfref
               warn "leaving block";
           }

           warn "just exited block";
           warn "time to die...";
           exit;

       When run as _/_f_o_o_/_t_e_s_t, the following output is produced:

           starting program at /foo/test line 18.
           CREATING SCALAR(0x8e5b8) at /foo/test line 7.
           CREATING SCALAR(0x8e57c) at /foo/test line 7.
           leaving block at /foo/test line 23.
           DESTROYING Subtle=SCALAR(0x8e5b8) at /foo/test line 13.
           just exited block at /foo/test line 26.
           time to die... at /foo/test line 27.
           DESTROYING Subtle=SCALAR(0x8e57c) during global destruction.

       Notice that "global destruction" bit there?  That’s the thread garbage
       collector reaching the unreachable.

       Objects are always destructed, even when regular refs aren’t.  Objects
       are destructed in a separate pass before ordinary refs just to prevent
       object destructors from using refs that have been themselves destruc-
       ted.  Plain refs are only garbage-collected if the destruct level is
       greater than 0.  You can test the higher levels of global destruction
       by setting the PERL_DESTRUCT_LEVEL environment variable, presuming
       "-DDEBUGGING" was enabled during perl build time.  See
       "PERL_DESTRUCT_LEVEL" in perlhack for more information.

       A more complete garbage collection strategy will be implemented at a
       future date.

       In the meantime, the best solution is to create a non-recursive con-
       tainer class that holds a pointer to the self-referential data struc-
       ture.  Define a DESTROY method for the containing object’s class that
       manually breaks the circularities in the self-referential structure.

SSEEEE AALLSSOO
       A kinder, gentler tutorial on object-oriented programming in Perl can
       be found in perltoot, perlboot and perltooc.  You should also check out
       perlbot for other object tricks, traps, and tips, as well as perlmodlib
       for some style guides on constructing both modules and classes.



perl v5.8.8                       2013-03-27                        PERLOBJ(1)
