PERLFORK(1)           User Contributed Perl Documentation          PERLFORK(1)



NNAAMMEE
       perlfork - Perl's fork() emulation

SSYYNNOOPPSSIISS
           NOTE:  As of the 5.8.0 release, fork() emulation has considerably
           matured.  However, there are still a few known bugs and differences
           from real fork() that might affect you.  See the "BUGS" and
           "CAVEATS AND LIMITATIONS" sections below.

       Perl provides a _f_o_r_k_(_) keyword that corresponds to the Unix system call
       of the same name.  On most Unix-like platforms where the _f_o_r_k_(_) system
       call is available, Perl’s _f_o_r_k_(_) simply calls it.

       On some platforms such as Windows where the _f_o_r_k_(_) system call is not
       available, Perl can be built to emulate _f_o_r_k_(_) at the interpreter
       level.  While the emulation is designed to be as compatible as possible
       with the real _f_o_r_k_(_) at the level of the Perl program, there are cer-
       tain important differences that stem from the fact that all the pseudo
       child "processes" created this way live in the same real process as far
       as the operating system is concerned.

       This document provides a general overview of the capabilities and limi-
       tations of the _f_o_r_k_(_) emulation.  Note that the issues discussed here
       are not applicable to platforms where a real _f_o_r_k_(_) is available and
       Perl has been configured to use it.

DDEESSCCRRIIPPTTIIOONN
       The _f_o_r_k_(_) emulation is implemented at the level of the Perl inter-
       preter.  What this means in general is that running _f_o_r_k_(_) will actu-
       ally clone the running interpreter and all its state, and run the
       cloned interpreter in a separate thread, beginning execution in the new
       thread just after the point where the _f_o_r_k_(_) was called in the parent.
       We will refer to the thread that implements this child "process" as the
       pseudo-process.

       To the Perl program that called _f_o_r_k_(_), all this is designed to be
       transparent.  The parent returns from the _f_o_r_k_(_) with a pseudo-process
       ID that can be subsequently used in any process manipulation functions;
       the child returns from the _f_o_r_k_(_) with a value of 0 to signify that it
       is the child pseudo-process.

       BBeehhaavviioorr ooff ootthheerr PPeerrll ffeeaattuurreess iinn ffoorrkkeedd ppsseeuuddoo--pprroocceesssseess

       Most Perl features behave in a natural way within pseudo-processes.

       $$ or $PROCESS_ID
               This special variable is correctly set to the pseudo-process
               ID.  It can be used to identify pseudo-processes within a par-
               ticular session.  Note that this value is subject to recycling
               if any pseudo-processes are launched after others have been
               _w_a_i_t_(_)-ed on.

       %ENV    Each pseudo-process maintains its own virtual environment.
               Modifications to %ENV affect the virtual environment, and are
               only visible within that pseudo-process, and in any processes
               (or pseudo-processes) launched from it.

       _c_h_d_i_r_(_) and all other builtins that accept filenames
               Each pseudo-process maintains its own virtual idea of the cur-
               rent directory.  Modifications to the current directory using
               _c_h_d_i_r_(_) are only visible within that pseudo-process, and in any
               processes (or pseudo-processes) launched from it.  All file and
               directory accesses from the pseudo-process will correctly map
               the virtual working directory to the real working directory
               appropriately.

       _w_a_i_t_(_) and _w_a_i_t_p_i_d_(_)
               _w_a_i_t_(_) and _w_a_i_t_p_i_d_(_) can be passed a pseudo-process ID returned
               by _f_o_r_k_(_).  These calls will properly wait for the termination
               of the pseudo-process and return its status.

       _k_i_l_l_(_)  _k_i_l_l_(_) can be used to terminate a pseudo-process by passing it
               the ID returned by _f_o_r_k_(_).  This should not be used except
               under dire circumstances, because the operating system may not
               guarantee integrity of the process resources when a running
               thread is terminated.  Note that using _k_i_l_l_(_) on a pseudo-_p_r_o_-
               _c_e_s_s_(_) may typically cause memory leaks, because the thread
               that implements the pseudo-process does not get a chance to
               clean up its resources.

       _e_x_e_c_(_)  Calling _e_x_e_c_(_) within a pseudo-process actually spawns the
               requested executable in a separate process and waits for it to
               complete before exiting with the same exit status as that pro-
               cess.  This means that the process ID reported within the run-
               ning executable will be different from what the earlier Perl
               _f_o_r_k_(_) might have returned.  Similarly, any process manipula-
               tion functions applied to the ID returned by _f_o_r_k_(_) will affect
               the waiting pseudo-process that called _e_x_e_c_(_), not the real
               process it is waiting for after the _e_x_e_c_(_).

       _e_x_i_t_(_)  _e_x_i_t_(_) always exits just the executing pseudo-process, after
               automatically _w_a_i_t_(_)-ing for any outstanding child pseudo-pro-
               cesses.  Note that this means that the process as a whole will
               not exit unless all running pseudo-processes have exited.

       Open handles to files, directories and network sockets
               All open handles are _d_u_p_(_)-ed in pseudo-processes, so that
               closing any handles in one process does not affect the others.
               See below for some limitations.

       RReessoouurrccee lliimmiittss

       In the eyes of the operating system, pseudo-processes created via the
       _f_o_r_k_(_) emulation are simply threads in the same process.  This means
       that any process-level limits imposed by the operating system apply to
       all pseudo-processes taken together.  This includes any limits imposed
       by the operating system on the number of open file, directory and
       socket handles, limits on disk space usage, limits on memory size, lim-
       its on CPU utilization etc.

       KKiilllliinngg tthhee ppaarreenntt pprroocceessss

       If the parent process is killed (either using Perl’s _k_i_l_l_(_) builtin, or
       using some external means) all the pseudo-processes are killed as well,
       and the whole process exits.

       LLiiffeettiimmee ooff tthhee ppaarreenntt pprroocceessss aanndd ppsseeuuddoo--pprroocceesssseess

       During the normal course of events, the parent process and every
       pseudo-process started by it will wait for their respective pseudo-
       children to complete before they exit.  This means that the parent and
       every pseudo-child created by it that is also a pseudo-parent will only
       exit after their pseudo-children have exited.

       A way to mark a pseudo-processes as running detached from their parent
       (so that the parent would not have to _w_a_i_t_(_) for them if it doesn’t
       want to) will be provided in future.

       CCAAVVEEAATTSS AANNDD LLIIMMIITTAATTIIOONNSS


       BEGIN blocks
               The _f_o_r_k_(_) emulation will not work entirely correctly when
               called from within a BEGIN block.  The forked copy will run the
               contents of the BEGIN block, but will not continue parsing the
               source stream after the BEGIN block.  For example, consider the
               following code:

                   BEGIN {
                       fork and exit;          # fork child and exit the parent
                       print "inner\n";
                   }
                   print "outer\n";

               This will print:

                   inner

               rather than the expected:

                   inner
                   outer

               This limitation arises from fundamental technical difficulties
               in cloning and restarting the stacks used by the Perl parser in
               the middle of a parse.

       Open filehandles
               Any filehandles open at the time of the _f_o_r_k_(_) will be
               _d_u_p_(_)-ed.  Thus, the files can be closed independently in the
               parent and child, but beware that the _d_u_p_(_)-ed handles will
               still share the same seek pointer.  Changing the seek position
               in the parent will change it in the child and vice-versa.  One
               can avoid this by opening files that need distinct seek point-
               ers separately in the child.

       Forking pipe _o_p_e_n_(_) not yet implemented
               The "open(FOO, "│-")" and "open(BAR, "-│")" constructs are not
               yet implemented.  This limitation can be easily worked around
               in new code by creating a pipe explicitly.  The following exam-
               ple shows how to write to a forked child:

                   # simulate open(FOO, "│-")
                   sub pipe_to_fork ($) {
                       my $parent = shift;
                       pipe my $child, $parent or die;
                       my $pid = fork();
                       die "fork() failed: $!" unless defined $pid;
                       if ($pid) {
                           close $child;
                       }
                       else {
                           close $parent;
                           open(STDIN, "<&=" . fileno($child)) or die;
                       }
                       $pid;
                   }

                   if (pipe_to_fork(’FOO’)) {
                       # parent
                       print FOO "pipe_to_fork\n";
                       close FOO;
                   }
                   else {
                       # child
                       while (<STDIN>) { print; }
                       exit(0);
                   }

               And this one reads from the child:

                   # simulate open(FOO, "-│")
                   sub pipe_from_fork ($) {
                       my $parent = shift;
                       pipe $parent, my $child or die;
                       my $pid = fork();
                       die "fork() failed: $!" unless defined $pid;
                       if ($pid) {
                           close $child;
                       }
                       else {
                           close $parent;
                           open(STDOUT, ">&=" . fileno($child)) or die;
                       }
                       $pid;
                   }

                   if (pipe_from_fork(’BAR’)) {
                       # parent
                       while (<BAR>) { print; }
                       close BAR;
                   }
                   else {
                       # child
                       print "pipe_from_fork\n";
                       exit(0);
                   }

               Forking pipe _o_p_e_n_(_) constructs will be supported in future.

       Global state maintained by XSUBs
               External subroutines (XSUBs) that maintain their own global
               state may not work correctly.  Such XSUBs will either need to
               maintain locks to protect simultaneous access to global data
               from different pseudo-processes, or maintain all their state on
               the Perl symbol table, which is copied naturally when _f_o_r_k_(_) is
               called.  A callback mechanism that provides extensions an
               opportunity to clone their state will be provided in the near
               future.

       Interpreter embedded in larger application
               The _f_o_r_k_(_) emulation may not behave as expected when it is exe-
               cuted in an application which embeds a Perl interpreter and
               calls Perl APIs that can evaluate bits of Perl code.  This
               stems from the fact that the emulation only has knowledge about
               the Perl interpreter’s own data structures and knows nothing
               about the containing application’s state.  For example, any
               state carried on the application’s own call stack is out of
               reach.

       Thread-safety of extensions
               Since the _f_o_r_k_(_) emulation runs code in multiple threads,
               extensions calling into non-thread-safe libraries may not work
               reliably when calling _f_o_r_k_(_).  As Perl’s threading support
               gradually becomes more widely adopted even on platforms with a
               native _f_o_r_k_(_), such extensions are expected to be fixed for
               thread-safety.

BBUUGGSS
       ·       Having pseudo-process IDs be negative integers breaks down for
               the integer "-1" because the _w_a_i_t_(_) and _w_a_i_t_p_i_d_(_) functions
               treat this number as being special.  The tacit assumption in
               the current implementation is that the system never allocates a
               thread ID of 1 for user threads.  A better representation for
               pseudo-process IDs will be implemented in future.

       ·       In certain cases, the OS-level handles created by the _p_i_p_e_(_),
               _s_o_c_k_e_t_(_), and _a_c_c_e_p_t_(_) operators are apparently not duplicated
               accurately in pseudo-processes.  This only happens in some sit-
               uations, but where it does happen, it may result in deadlocks
               between the read and write ends of pipe handles, or inability
               to send or receive data across socket handles.

       ·       This document may be incomplete in some respects.

AAUUTTHHOORR
       Support for concurrent interpreters and the _f_o_r_k_(_) emulation was imple-
       mented by ActiveState, with funding from Microsoft Corporation.

       This document is authored and maintained by Gurusamy Sarathy
       <gsar@activestate.com>.

SSEEEE AALLSSOO
       "fork" in perlfunc, perlipc



perl v5.8.8                       2013-03-27                       PERLFORK(1)
