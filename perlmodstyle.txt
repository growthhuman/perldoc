PERLMODSTYLE(1)       User Contributed Perl Documentation      PERLMODSTYLE(1)



NNAAMMEE
       perlmodstyle - Perl module style guide

IINNTTRROODDUUCCTTIIOONN
       This document attempts to describe the Perl Community’s "best practice"
       for writing Perl modules.  It extends the recommendations found in
       perlstyle , which should be considered required reading before reading
       this document.

       While this document is intended to be useful to all module authors, it
       is particularly aimed at authors who wish to publish their modules on
       CPAN.

       The focus is on elements of style which are visible to the users of a
       module, rather than those parts which are only seen by the module’s
       developers.  However, many of the guidelines presented in this document
       can be extrapolated and applied successfully to a module’s internals.

       This document differs from perlnewmod in that it is a style guide
       rather than a tutorial on creating CPAN modules.  It provides a check-
       list against which modules can be compared to determine whether they
       conform to best practice, without necessarily describing in detail how
       to achieve this.

       All the advice contained in this document has been gleaned from exten-
       sive conversations with experienced CPAN authors and users.  Every
       piece of advice given here is the result of previous mistakes.  This
       information is here to help you avoid the same mistakes and the extra
       work that would inevitably be required to fix them.

       The first section of this document provides an itemized checklist; sub-
       sequent sections provide a more detailed discussion of the items on the
       list.  The final section, "Common Pitfalls", describes some of the most
       popular mistakes made by CPAN authors.

QQUUIICCKK CCHHEECCKKLLIISSTT
       For more detail on each item in this checklist, see below.

       BBeeffoorree yyoouu ssttaarrtt


       ·   Don’t re-invent the wheel

       ·   Patch, extend or subclass an existing module where possible

       ·   Do one thing and do it well

       ·   Choose an appropriate name

       TThhee AAPPII


       ·   API should be understandable by the average programmer

       ·   Simple methods for simple tasks

       ·   Separate functionality from output

       ·   Consistent naming of subroutines or methods

       ·   Use named parameters (a hash or hashref) when there are more than
           two parameters

       SSttaabbiilliittyy


       ·   Ensure your module works under "use strict" and "-w"

       ·   Stable modules should maintain backwards compatibility

       DDooccuummeennttaattiioonn


       ·   Write documentation in POD

       ·   Document purpose, scope and target applications

       ·   Document each publically accessible method or subroutine, including
           params and return values

       ·   Give examples of use in your documentation

       ·   Provide a README file and perhaps also release notes, changelog,
           etc

       ·   Provide links to further information (URL, email)

       RReelleeaassee ccoonnssiiddeerraattiioonnss


       ·   Specify pre-requisites in Makefile.PL or Build.PL

       ·   Specify Perl version requirements with "use"

       ·   Include tests with your module

       ·   Choose a sensible and consistent version numbering scheme (X.YY is
           the common Perl module numbering scheme)

       ·   Increment the version number for every change, no matter how small

       ·   Package the module using "make dist"

       ·   Choose an appropriate license (GPL/Artistic is a good default)

BBEEFFOORREE YYOOUU SSTTAARRTT WWRRIITTIINNGG AA MMOODDUULLEE
       Try not to launch headlong into developing your module without spending
       some time thinking first.  A little forethought may save you a vast
       amount of effort later on.

       HHaass iitt bbeeeenn ddoonnee bbeeffoorree??

       You may not even need to write the module.  Check whether it’s already
       been done in Perl, and avoid re-inventing the wheel unless you have a
       good reason.

       Good places to look for pre-existing modules include
       http://search.cpan.org/ and asking on modules@perl.org

       If an existing module aallmmoosstt does what you want, consider writing a
       patch, writing a subclass, or otherwise extending the existing module
       rather than rewriting it.

       DDoo oonnee tthhiinngg aanndd ddoo iitt wweellll

       At the risk of stating the obvious, modules are intended to be modular.
       A Perl developer should be able to use modules to put together the
       building blocks of their application.  However, it’s important that the
       blocks are the right shape, and that the developer shouldn’t have to
       use a big block when all they need is a small one.

       Your module should have a clearly defined scope which is no longer than
       a single sentence.  Can your module be broken down into a family of
       related modules?

       Bad example:

       "FooBar.pm provides an implementation of the FOO protocol and the
       related BAR standard."

       Good example:

       "Foo.pm provides an implementation of the FOO protocol.  Bar.pm imple-
       ments the related BAR protocol."

       This means that if a developer only needs a module for the BAR stan-
       dard, they should not be forced to install libraries for FOO as well.

       WWhhaatt’’ss iinn aa nnaammee??

       Make sure you choose an appropriate name for your module early on.
       This will help people find and remember your module, and make program-
       ming with your module more intuitive.

       When naming your module, consider the following:

       ·   Be descriptive (i.e. accurately describes the purpose of the mod-
           ule).

       ·   Be consistent with existing modules.

       ·   Reflect the functionality of the module, not the implementation.

       ·   Avoid starting a new top-level hierarchy, especially if a suitable
           hierarchy already exists under which you could place your module.

       You should contact modules@perl.org to ask them about your module name
       before publishing your module.  You should also try to ask people who
       are already familiar with the module’s application domain and the CPAN
       naming system.  Authors of similar modules, or modules with similar
       names, may be a good place to start.

DDEESSIIGGNNIINNGG AANNDD WWRRIITTIINNGG YYOOUURR MMOODDUULLEE
       Considerations for module design and coding:

       TToo OOOO oorr nnoott ttoo OOOO??

       Your module may be object oriented (OO) or not, or it may have both
       kinds of interfaces available.  There are pros and cons of each tech-
       nique, which should be considered when you design your API.

       According to Damian Conway, you should consider using OO:

       ·   When the system is large or likely to become so

       ·   When the data is aggregated in obvious structures that will become
           objects

       ·   When the types of data form a natural hierarchy that can make use
           of inheritance

       ·   When operations on data vary according to data type (making poly-
           morphic invocation of methods feasible)

       ·   When it is likely that new data types may be later introduced into
           the system, and will need to be handled by existing code

       ·   When interactions between data are best represented by overloaded
           operators

       ·   When the implementation of system components is likely to change
           over time (and hence should be encapsulated)

       ·   When the system design is itself object-oriented

       ·   When large amounts of client code will use the software (and should
           be insulated from changes in its implementation)

       ·   When many separate operations will need to be applied to the same
           set of data

       Think carefully about whether OO is appropriate for your module.  Gra-
       tuitous object orientation results in complex APIs which are difficult
       for the average module user to understand or use.

       DDeessiiggnniinngg yyoouurr AAPPII

       Your interfaces should be understandable by an average Perl programmer.
       The following guidelines may help you judge whether your API is suffi-
       ciently straightforward:

       Write simple routines to do simple things.
           It’s better to have numerous simple routines than a few monolithic
           ones.  If your routine changes its behaviour significantly based on
           its arguments, it’s a sign that you should have two (or more) sepa-
           rate routines.

       Separate functionality from output.
           Return your results in the most generic form possible and allow the
           user to choose how to use them.  The most generic form possible is
           usually a Perl data structure which can then be used to generate a
           text report, HTML, XML, a database query, or whatever else your
           users require.

           If your routine iterates through some kind of list (such as a list
           of files, or records in a database) you may consider providing a
           callback so that users can manipulate each element of the list in
           turn.  File::Find provides an example of this with its
           "find(\&wanted, $dir)" syntax.

       Provide sensible shortcuts and defaults.
           Don’t require every module user to jump through the same hoops to
           achieve a simple result.  You can always include optional parame-
           ters or routines for more complex or non-standard behaviour.  If
           most of your users have to type a few almost identical lines of
           code when they start using your module, it’s a sign that you should
           have made that behaviour a default.  Another good indicator that
           you should use defaults is if most of your users call your routines
           with the same arguments.

       Naming conventions
           Your naming should be consistent.  For instance, it’s better to
           have:

                   display_day();
                   display_week();
                   display_year();

           than

                   display_day();
                   week_display();
                   show_year();

           This applies equally to method names, parameter names, and anything
           else which is visible to the user (and most things that aren’t!)

       Parameter passing
           Use named parameters. It’s easier to use a hash like this:

               $obj->do_something(
                       name => "wibble",
                       type => "text",
                       size => 1024,
               );

           ... than to have a long list of unnamed parameters like this:

               $obj->do_something("wibble", "text", 1024);

           While the list of arguments might work fine for one, two or even
           three arguments, any more arguments become hard for the module user
           to remember, and hard for the module author to manage.  If you want
           to add a new parameter you will have to add it to the end of the
           list for backward compatibility, and this will probably make your
           list order unintuitive.  Also, if many elements may be undefined
           you may see the following unattractive method calls:

               $obj->do_something(undef, undef, undef, undef, undef, undef, 1024);

           Provide sensible defaults for parameters which have them.  Don’t
           make your users specify parameters which will almost always be the
           same.

           The issue of whether to pass the arguments in a hash or a hashref
           is largely a matter of personal style.

           The use of hash keys starting with a hyphen ("-name") or entirely
           in upper case ("NAME") is a relic of older versions of Perl in
           which ordinary lower case strings were not handled correctly by the
           "=>" operator.  While some modules retain uppercase or hyphenated
           argument keys for historical reasons or as a matter of personal
           style, most new modules should use simple lower case keys.  What-
           ever you choose, be consistent!

       SSttrriiccttnneessss aanndd wwaarrnniinnggss

       Your module should run successfully under the strict pragma and should
       run without generating any warnings.  Your module should also handle
       taint-checking where appropriate, though this can cause difficulties in
       many cases.

       BBaacckkwwaarrddss ccoommppaattiibbiilliittyy

       Modules which are "stable" should not break backwards compatibility
       without at least a long transition phase and a major change in version
       number.

       EErrrroorr hhaannddlliinngg aanndd mmeessssaaggeess

       When your module encounters an error it should do one or more of:

       ·   Return an undefined value.

       ·   set $Module::errstr or similar ("errstr" is a common name used by
           DBI and other popular modules; if you choose something else, be
           sure to document it clearly).

       ·   "warn()" or "carp()" a message to STDERR.

       ·   "croak()" only when your module absolutely cannot figure out what
           to do.  ("croak()" is a better version of "die()" for use within
           modules, which reports its errors from the perspective of the
           caller.  See Carp for details of "croak()", "carp()" and other use-
           ful routines.)

       ·   As an alternative to the above, you may prefer to throw exceptions
           using the Error module.

       Configurable error handling can be very useful to your users.  Consider
       offering a choice of levels for warning and debug messages, an option
       to send messages to a separate file, a way to specify an error-handling
       routine, or other such features.  Be sure to default all these options
       to the commonest use.

DDOOCCUUMMEENNTTIINNGG YYOOUURR MMOODDUULLEE
       PPOODD

       Your module should include documentation aimed at Perl developers.  You
       should use Perl’s "plain old documentation" (POD) for your general
       technical documentation, though you may wish to write additional docu-
       mentation (white papers, tutorials, etc) in some other format.  You
       need to cover the following subjects:

       ·   A synopsis of the common uses of the module

       ·   The purpose, scope and target applications of your module

       ·   Use of each publically accessible method or subroutine, including
           parameters and return values

       ·   Examples of use

       ·   Sources of further information

       ·   A contact email address for the author/maintainer

       The level of detail in Perl module documentation generally goes from
       less detailed to more detailed.  Your SYNOPSIS section should contain a
       minimal example of use (perhaps as little as one line of code; skip the
       unusual use cases or anything not needed by most users); the DESCRIP-
       TION should describe your module in broad terms, generally in just a
       few paragraphs; more detail of the module’s routines or methods,
       lengthy code examples, or other in-depth material should be given in
       subsequent sections.

       Ideally, someone who’s slightly familiar with your module should be
       able to refresh their memory without hitting "page down".  As your
       reader continues through the document, they should receive a progres-
       sively greater amount of knowledge.

       The recommended order of sections in Perl module documentation is:

       ·   NAME

       ·   SYNOPSIS

       ·   DESCRIPTION

       ·   One or more sections or subsections giving greater detail of avail-
           able methods and routines and any other relevant information.

       ·   BUGS/CAVEATS/etc

       ·   AUTHOR

       ·   SEE ALSO

       ·   COPYRIGHT and LICENSE

       Keep your documentation near the code it documents ("inline" documenta-
       tion).  Include POD for a given method right above that method’s sub-
       routine.  This makes it easier to keep the documentation up to date,
       and avoids having to document each piece of code twice (once in POD and
       once in comments).

       RREEAADDMMEE,, IINNSSTTAALLLL,, rreelleeaassee nnootteess,, cchhaannggeellooggss

       Your module should also include a README file describing the module and
       giving pointers to further information (website, author email).

       An INSTALL file should be included, and should contain simple installa-
       tion instructions. When using ExtUtils::MakeMaker this will usually be:

       perl Makefile.PL
       make
       make test
       make install

       When using Module::Build, this will usually be:

       perl Build.PL
       perl Build
       perl Build test
       perl Build install

       Release notes or changelogs should be produced for each release of your
       software describing user-visible changes to your module, in terms rele-
       vant to the user.

RREELLEEAASSEE CCOONNSSIIDDEERRAATTIIOONNSS
       VVeerrssiioonn nnuummbbeerriinngg

       Version numbers should indicate at least major and minor releases, and
       possibly sub-minor releases.  A major release is one in which most of
       the functionality has changed, or in which major new functionality is
       added.  A minor release is one in which a small amount of functionality
       has been added or changed.  Sub-minor version numbers are usually used
       for changes which do not affect functionality, such as documentation
       patches.

       The most common CPAN version numbering scheme looks like this:

           1.00, 1.10, 1.11, 1.20, 1.30, 1.31, 1.32

       A correct CPAN version number is a floating point number with at least
       2 digits after the decimal. You can test whether it conforms to CPAN by
       using

           perl -MExtUtils::MakeMaker -le ’print MM->parse_version(shift)’ ’Foo.pm’

       If you want to release a ’beta’ or ’alpha’ version of a module but
       don’t want CPAN.pm to list it as most recent use an ’_’ after the regu-
       lar version number followed by at least 2 digits, eg. 1.20_01. If you
       do this, the following idiom is recommended:

         $VERSION = "1.12_01";
         $XS_VERSION = $VERSION; # only needed if you have XS code
         $VERSION = eval $VERSION;

       With that trick MakeMaker will only read the first line and thus read
       the underscore, while the perl interpreter will evaluate the $VERSION
       and convert the string into a number. Later operations that treat $VER-
       SION as a number will then be able to do so without provoking a warning
       about $VERSION not being a number.

       Never release anything (even a one-word documentation patch) without
       incrementing the number.  Even a one-word documentation patch should
       result in a change in version at the sub-minor level.

       PPrree--rreeqquuiissiitteess

       Module authors should carefully consider whether to rely on other mod-
       ules, and which modules to rely on.

       Most importantly, choose modules which are as stable as possible.  In
       order of preference:

       ·   Core Perl modules

       ·   Stable CPAN modules

       ·   Unstable CPAN modules

       ·   Modules not available from CPAN

       Specify version requirements for other Perl modules in the pre-requi-
       sites in your Makefile.PL or Build.PL.

       Be sure to specify Perl version requirements both in Makefile.PL or
       Build.PL and with "require 5.6.1" or similar. See the section on "use
       VERSION" of "require" in perlfunc for details.

       TTeessttiinngg

       All modules should be tested before distribution (using "make
       disttest"), and the tests should also be available to people installing
       the modules (using "make test").  For Module::Build you would use the
       "make test" equivalent "perl Build test".

       The importance of these tests is proportional to the alleged stability
       of a module -- a module which purports to be stable or which hopes to
       achieve wide use should adhere to as strict a testing regime as possi-
       ble.

       Useful modules to help you write tests (with minimum impact on your
       development process or your time) include Test::Simple, Carp::Assert
       and Test::Inline.  For more sophisticated test suites there are
       Test::More and Test::MockObject.

       PPaacckkaaggiinngg

       Modules should be packaged using one of the standard packaging tools.
       Currently you have the choice between ExtUtils::MakeMaker and the more
       platform independent Module::Build, allowing modules to be installed in
       a consistent manner.  When using ExtUtils::MakeMaker, you can use "make
       dist" to create your package. Tools exist to help you to build your
       module in a MakeMaker-friendly style. These include ExtUtils::Module-
       Maker and h2xs.  See also perlnewmod.

       LLiicceennssiinngg

       Make sure that your module has a license, and that the full text of it
       is included in the distribution (unless it’s a common one and the terms
       of the license don’t require you to include it).

       If you don’t know what license to use, dual licensing under the GPL and
       Artistic licenses (the same as Perl itself) is a good idea.  See perl-
       gpl and perlartistic.

CCOOMMMMOONN PPIITTFFAALLLLSS
       RReeiinnvveennttiinngg tthhee wwhheeeell

       There are certain application spaces which are already very, very well
       served by CPAN.  One example is templating systems, another is date and
       time modules, and there are many more.  While it is a rite of passage
       to write your own version of these things, please consider carefully
       whether the Perl world really needs you to publish it.

       TTrryyiinngg ttoo ddoo ttoooo mmuucchh

       Your module will be part of a developer’s toolkit.  It will not, in
       itself, form the eennttiirree toolkit.  It’s tempting to add extra features
       until your code is a monolithic system rather than a set of modular
       building blocks.

       IInnaapppprroopprriiaattee ddooccuummeennttaattiioonn

       Don’t fall into the trap of writing for the wrong audience.  Your pri-
       mary audience is a reasonably experienced developer with at least a
       moderate understanding of your module’s application domain, who’s just
       downloaded your module and wants to start using it as quickly as possi-
       ble.

       Tutorials, end-user documentation, research papers, FAQs etc are not
       appropriate in a module’s main documentation.  If you really want to
       write these, include them as sub-documents such as "My::Module::Tuto-
       rial" or "My::Module::FAQ" and provide a link in the SEE ALSO section
       of the main documentation.

SSEEEE AALLSSOO
       perlstyle
           General Perl style guide

       perlnewmod
           How to create a new module

       perlpod
           POD documentation

       podchecker
           Verifies your POD’s correctness

       Packaging Tools
           ExtUtils::MakeMaker, Module::Build

       Testing tools
           Test::Simple, Test::Inline, Carp::Assert, Test::More, Test::MockOb-
           ject

       http://pause.perl.org/
           Perl Authors Upload Server.  Contains links to information for mod-
           ule authors.

       Any good book on software engineering

AAUUTTHHOORR
       Kirrily "Skud" Robert <skud@cpan.org>



perl v5.8.8                       2013-03-27                   PERLMODSTYLE(1)
